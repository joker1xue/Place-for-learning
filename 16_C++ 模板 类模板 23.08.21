23.08.21

模板  类模板



/***********类模板基本语法**********/
类模板的作用：建立一个通用类，类内成员变量不用明确数据类型，用一个虚拟类型来代替。

template<typename T>
class...

实例：
template<typename NameType,typename AgeType>
class Person
{
  public:
  Public(NameType name,AgeType age)
  {
    this->m_name = name;
    this->m_age = age;
    cout << "name is " << this->m_name << " age is " << this->m_age << endl;
  }

  NameType m_name;
  AgeType m_age;
};

void test01()
{
  Person<string,int> p1("Jack",21);
}



/************类模板与函数模板区别**********/
1.类模板没有自动类型推导
2.类模板在模板参数列表中可以有默认参数

template<typename NameType,typename AgeType = int>//AgeType的默认类型为int
class Person
{
  public:
  Person(NameType name,AgeType age)
  {
    this->m_name = name;
    this->m_age = age;
  }
  NameType name;
  AgeType age;
};

void test01()
{
  //Person p1("Jack",21);报错，类模板无法自动推导，必须加上模板参数列表
  Person<string,int> p2("Rose",20);//正确
  Person<string> p3("Ttnk",19);//正确
}

/************类模板中成员函数创建时机*************/
类模板中成员函数一开始并不会直接创建，而是在调用时才会创建
class Person1
{
  public:
  void showPerson1()
  {
    cout << "Person1 running" << endl;
  }
};

class Person2
{
  public:
  void showPerson2()
  {
    cout << "Person2 running" << endl;
  }
};

template<typename T>
class MyClass
{
  T obj;
  void Show1()
  {
    obj.showPerson1();
  }
  void Show2()
  {
    obj.showPerson2();
  }
};

void test01()//在写test01前的程序不会报错，因为没有调用类模板成员函数，所以并没有生成。
{
  MyClass<Person1> m;
  MyClass<Person2> n;
  m.Show1();//不报错
  //m.Show2();报错
  n.Show2();//不报错
  //n.Show1();报错
}



/***类模板对象做函数参数***********************************************************************/
1.指定传入类型

void showPerson1(Person<string,int> &p)

2.参数模板化

template<typename T1,typename T2>
void showPerson2(Person<T1,T2> &p)

3.整个类模板化

template<typename T>
void showPerson3(T &p)



/***类模板与继承****************************************************************************/
如果父类是类模板，子类需要指定父类中T的数据类型

template<class T>
class Father
{
  T m;
};

//class Son:public Father//报错，需要指定父类中成员变量的类型
class Son1:public Father<int>
{};

//如果想要灵活地定义子类，那么子类也要成为一个类模板
template<class T1,class T2>
class Son2:public Father<T2>
{
  T1 n;
};



/***类模板成员函数类外实现********************************************************************/

template<class T1,class T2>
class Person
{
public:

  Person(T1 name,T2 age);

  void showPerson();

  T1 m_name;
  T2 m_age;
};

template<class T1,class T2>
Person<T1,T2>::Person(T1 name,T2 age)
{
  this->m_name = name;
  this->m_age = age;
}

template<class T1,class T2>
void Person<T1,T2>::showPerson()
{
  cout << "name is " << this->m_name << " age is " << this->m_age <<endl;
}



/***类模板分文件编写********************************************************************************/
掌握类模板分文件编写产生的问题以及解决方法

问题：类模板中成员函数创建时机在调用时，因此分文件编写时链接不到

解决：
1.直接包含.cpp源文件
2.将声明与实现写到同一个文件中，并改后缀名为.hpp，hpp是约定的名称，并不是强制的






















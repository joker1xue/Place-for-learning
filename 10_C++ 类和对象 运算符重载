23.07.20

运算符重载：对已有的运算符重新定义，赋予其另一种功能，以适应不同的数据类型

/**********加号运算符重载**********/

//对于内置的数据类型的表达式的运算符是不能重载的，比如1+1中的加号，1是int型
//不要滥用重载

1.成员函数重载

class Person()
{
public:
  Person operator+(Person &p1)
  { 
    Person temp;
    temp.m_A = this->m_A + p1.m_A;
    temp.m_B = this->m_B + p1.m_B;
    return temp;
  }
  int m_A;
  int m_B;

};

test01()
{
  Person p1;
  Person p2;
  p1.m_A = 10;
  p1.m_B = 10;
  p2.m_A = 10;
  p2.m_B = 10;
  //使用定义方式运用重载运算符
  Person p3 = p1.operator+(p2);
  //普通方式
  Person p4 = p1 + p2;
}

2.全局函数重载
//类定义如上个代码

Person operator+(Person &p1,Person &p2)
{
  Person temp;
  temp.m_A = p2.m_A + p1.m_A;
  temp.m_B = p2.m_B + p1.m_B;
  return temp;
}

test02()
{
  Person p1;
  Person p2;
  p1.m_A = 10;
  p1.m_B = 10;
  p2.m_A = 10;
  p2.m_B = 10;
  //使用定义方式运用重载运算符
  Person p3 = operator+(p1,p2);
  //普通方式
  Person p4 = p1 + p2;
}



/**********左移运算符重载**********/
cout<<" "<<endl;
1.尝试使用成员函数重载

class Person()
{
  Person operator<<(cout){}      //定义形式 p.operator<<(cout)   //常用形式 p<<cout
};

可以看到常用形式的问题所在，所以不使用成员函数重载左移运算符

2.使用全局函数重载
ostream & operator<<(Person &p,ostream &cout)
{
  cout << "p.m_A = " << p.m_A << "p.m_B = " << p.m_B << endl;
  return cout;
}
void test01()
{
  cout << p << endl;
}


/**********自增运算符重载**********/

1.前置递增
2.后置递增

class Myinteger
{
friend ostream& operator<<(ostream& out,Myinteger& myint)
 public:
  Myinteger()
  {
    m_Num = 0;
  }

Myinteger& operator++()
{
  m_Num++;
  return *this;
}

Myinteger operator++(int)
{
  Myinteger temp = *this;
  m_Num++;
  return temp;
}
int m_Num;
};

test01()
{
  Myinteger myint;
  cout << myint << endl;
  cout << myint++ << endl;
  cout << myint << endl;
  cout << ++myint << endl;
}

/**********赋值运算符重载**********/
C++编译器会为类提供四种函数
1.构造  2.析构 3.拷贝  4.赋值运算符operator=
class Person
{
  Person(int age)
  {
    m_Age = new int(age);
  }

  Person& operator=(Person& p)
  {
    if(m_Age != NULL)
    {
      delete m_Age;
      m_Age = NULL;
    }
    //m_Age = p.m_Age;浅拷贝会导致重复释放堆区的数据，应该另外开辟一个堆区存放数据
    m_Age = new int(*p.m_Age);
    return *this;
  }

  int * m_Age;
};

test01()
{
  Person p1(10);
  Person p2(20);
  Person p3(30);
  p3 = p2 = p1;
  //cout 结果是p1/p2/p3均为10
}



/**********关系运算符重载**********/

1.==
2.!=
class Person
{
  Person(string& name,int& age)
  {
    m_Name = name;
    m_Age = age;
  }

  bool operator==(Person& p)
  {
    if(m_Name == p.m_Name && m_Age == p.m_Age)
    {
      return true;
    }
    return false;
  }

  bool operator!=(Person& p)
  {
    if(m_Name != p.m_Name || m_Age != p.m_Age)
    {
      return ture;
    }
    reuturn false;
  }

  string m_Name;
  int m_Age;
};



/**********函数调用运算符重载**********/











23.08.28

vector容器

/***基本概念***********************************************************************************************/
功能：vector结构与数组十分相似，也称为单端数组。
区别：数组是静态空间，vector容器可以动态拓展。
动态拓展：并不是在原空间后接续新空间，而是找到更大的内存空间，将数据拷贝并释放原空间
vector容器迭代器支持随机访问。



/***构造函数*******************************************************************************************/
//默认构造
vector<T> v;

//区间构造
vector(v1.begin(),v1.end());

//将n个elem拷贝给本身
vector(n,elem);

//拷贝构造
vector(const vector& vec);

void printVector(const vector& vec)
{
  for(vector<int>::iterator it = vec.begin();it != vec.end();it++)
  {
    cout << *it << " ";
  }
  cout << endl;
}

void test()
{
  vector<int> v1;   //默认构造
  for(int i = 0 ;i<10;i++)
  {
    v1.push_back(i);
  }
  printVector(v1);   //0 1 2 3 4 5 6 7 8 9

  vector<int> v2(v1.begin(),v1.end());   //区间构造
  printVector(v2);   //0 1 2 3 4 5 6 7 8 9

  vector<int> v3(10,1);   //n个elem
  printVector(v3);   //1 1 1 1 1 1 1 1 1 1

  vector<int> v4(v3);   //拷贝构造
  printVector(v4);   //1 1 1 1 1 1 1 1 1 1
}



/***赋值操作************************************************************************/
//1.operator=
  
  vector<int> v1;
  for(int i = 0 ;i<10;i++)
  {
    v1.push_back(i);
  }
  printVector(v1);   //0 1 2 3 4 5 6 7 8 9

  vector<int> v2;
  v2 = v1;
  printVector(v2);   //0 1 2 3 4 5 6 7 8 9

//2.assign

  vector<int> v3;
  v3.assign(v1.begin(),v1.end());
  printVector(v2);   //0 1 2 3 4 5 6 7 8 9

  vector<int> v4;
  v4.assign(10,1);
  printVector(v4);   //1 1 1 1 1 1 1 1 1 1



/***容量和大小*************************************************************************/
函数原型：
empty();   //判断是否为空
capacity();   //返回容器容量
size();  //返回容器大小
resize(int num，int elem);   //重新指定容器的容量，如果容量大于大小，则没有元素的位置置为默认值,如果参数列表中有elem，则置为elem
                             //如果容量小于大小，则将末尾超出容量范围的元素删除。

void test()
{
  vector<int> v1;
  for(int i = 0;i<10;i++)
  {
    v1.push_back(i);
  }
  printVector(v1);  //0 1 2 3 4 5 6 7 8 9

  if(v1.empty()!=0)
  {
    cout << " vector is empty! " << endl;
  }
  else
  {
    cout << "vector is not empty!" << endl;
    cout << "vector's capacity is:" << v1.capacity() << endl;   //13
    cout << "vector's size is:" << v1.size() << endl;   //10
  }

  //resize
  v1.resize(15);
  printVector(v1);  //0 1 2 3 4 5 6 7 8 9 0 0 0 0 0

  v1.resize(5);
  printVector(v1);  //0 1 2 3 4

  
}



/***插入和删除*******************************************************************************/
push_back(elem);   //尾部插入元素elem
pop_back();   //删除尾部最后一个元素
insert(const_iterator pos,elem);   //在pos处插入元素elem
insert(const_iterator pos,int n,elem);   //在pos处连续插入n个元素elem
erase(const_iterator pos);   //删除迭代器指向的元素
erase(const_iterator pos,const_iterator end);   //删除迭代器从pos到end位置之间的元素
clear();   //删除容器中所有的元素























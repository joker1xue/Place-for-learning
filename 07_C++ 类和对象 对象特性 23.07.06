23.07.06

/***********对象特性 对象的初始化和清理**********/

//在类中定义的构造函数和析构函数负责对象的初始化和清理
//如果不手动写构造函数和析构函数的话，编译器会自动提供空实现的构造函数和析构函数

Class(){}
//可以有参数，允许函数重载，没有返回值，创建对象时自动调用

~Class(){}
//不可以有参数，不允许重载，没有返回值，销毁对象时自动调用




/**********构造函数的分类和调用**********/

//两种分类方式：   按参数分：有参构造和无参构造    按类型分：普通构造和拷贝构造

Class Person()
{
  public:
    Person(){}               //无参构造
    Person(int a){}          //有参构造
    Person(const Person &p)  //拷贝构造，无参和有参构造都是普通构造
};



//三种调用方法

//括号法
Person p;      //默认构造函数构造
Person p2(10); //有参构造函数
Person p3(p2); //拷贝构造函数

//显示法
Person p1;
Person p2 = Person(10);
Person p3 = Person(p2);
Person(10);      //匿名对象，当前行执行完后立即销毁

//隐式转换法
Person p4 = 10;      //相当于Person p4 = Person(10);
Person p5 = p4;



/**********拷贝构造函数调用时机**********/

//1. 使用一个创建完毕的对象来初始化一个新的对象 
//2. 值传递方式给函数传参
//3. 以值方式返回局部对象



/**********构造函数调用规则**********/

1. 创建一个类，至少添加三个函数，分别是默认构造函数、默认拷贝构造函数和默认析构函数
2. 用户自己创建了构造函数之后，程序便不再自动创建构造函数，但是依然提供拷贝构造
   如果写了有参构造函数而没写默认构造函数，程序不会提供默认构造，会报错。
3. 用户自己创建了默认拷贝函数之后，程序便不再自动构建其他函数



/**********深拷贝与浅拷贝**********/

浅拷贝：简单的赋值拷贝
深拷贝：重新在堆区申请空间进行拷贝

浅拷贝在拷贝构造函数不进行重新申请空间的情况下，会重复释放发生错误，利用深拷贝就能解决

如果有申请堆区空间的操作，一定要自己创建拷贝构造函数，防止浅拷贝带来的问题

析构函数可以用于释放不能由程序自动释放的堆区数据



/**********初始化列表**********/

Class Person
{
public:
  Person(int a , int b , int c):m_A(a),m_B(b),m_C(c)
  {
  //这样的初始化列表在构造对象时就已经为值初始化了，不再需要语句对其进行初始化。
  }

};



/**********类对象作为类成员**********/

当类成员为类对象时，先构造类成员，再构造类，析构时，先调用类的析构函数，后调用类成员的析构函数。
Class Phone
{
public:
  Phone(pName){
      m_pName = pName;
      cout<<"Phone的构造函数调用"<<endl;
  }
  ~Phone(){
      cout<<"Phone的析构函数调用"<<endl;
  }
  string m_pName;
};

Class Person
{
public:
  Person(string Name,string pName):m_Name(Name),mPhone(pName)
  {
    cout<<"Person的构造函数调用"<<endl;
  }  
  ~Person()
  {
    cout<<"Person的析构函数调用"<<endl;
  }
  string m_Name;
  Phone mPhone;
};



/**********静态成员**********/

1.静态成员变量
（1）所有对象共享同一份数据，可以通过对象访问，也可以通过类名访问
（2）编译阶段就分配内存
（3）类内声明，类外初始化
（4）静态成员变量也是有访问权限的

class Person
{
public:
  static int age;
}

int Person::age = 100;

void test01(){
  Person p;
  cout<<p.age<<endl;
}

void test02(){
  cout<<Person::age<<endl;
}


2.静态成员函数
（1）所有对象共享同一个函数
（2）静态成员函数只能访问静态成员变量
（3）静态成员函数也是有访问权限的

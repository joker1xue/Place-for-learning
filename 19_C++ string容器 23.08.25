23.08.25

string容器

/***string基本概念***********************************************************************/

本质：string是C++风格的字符串，本质上是一个类

string和char*的区别：
char*是一个指针，而string是一个类，类内封装了char*用于管理字符串，是一个char*型的容器

特点：
string封装了很多成员方法，例如find、copy、delete。
string管理char*所分配的内存，不用担心复制越界和取值越界，由类内进行管理和负责


/***string构造函数********************************************************************************/

//无参构造，创建一个空字符串
string();
//有参构造，使用字符串s进行初始化
string(const char* s);
//拷贝构造
string(const string& str);
//使用n个字符c进行初始化
string(n,'c');



/***string的赋值操作******************************************************************************************/

string& operator=(const char* str);//char*类型字符串，赋值给当前字符串
string& operator=(const string& s);//把字符串s赋值给当前字符串
string& operator=(char c);//将字符c赋值给当前字符串
string& assign(const char *s);//将字符串s直接赋值给当前字符串
string& assign(const char *s,n);//将字符串s的前n个字符赋值给字符串
string& assign(const string& s);//将字符串s直接赋值给当前字符串
string& assign(n,'c');//将n个字符c赋值给当前字符串


/***string字符串拼接*******************************************************************************************/

string& operator+=(const char* s);
string& operator+=(const string& s);
string& operator+=(const char c);
string& append(const char *s);
string& append(const string &s);
string& append(const char *s,int n);//把字符串s的前n个字符拼接到当前字符串后
string& append(const char *s,int pos,int n);//从字符串s的第pos个字符开始把n个字符拼接到当前字符串后


/***string查找和替换********************************************************************************************/

int find(const string& str,int pos = 0) const;
int find(const char* s,int pos = 0) const;
int find(const char* s,int pos = 0,int n) const;//从s的第pos个字符位置开始的前n个字符中查找
int find(const char c,int n);//在当前字符串中的前n个字符中查找字符c

int rfind(const string& str,int pos = 0) const;//rfind与find的区别在于rfind从右开始找第一个，find是从左开始找第一个。

string& replace(int pos ,int n,const string* str);//替换从第pos个字符开始的n个字符为str



/***string字符串比较***************************************************************************************************/
按照字符串ASCII码比较
= 返回 0
> 返回 1
< 返回 -1

函数原型：
int compare(const string& str) const;
int compare(const char* c) const;



/***string字符存取************************************************************************************************************/
char& operator[](int n);
char& at(int n);

string str = "hello";
//读取
for(int i = 0; i<str.size(); i++)
{
  //1.通过[]
  cout << str[i] << " " ;
}
cout << endl;

for(int i = 0;i < str.size();i++)
{
  //2.通过at
  cout << str.at(i) << " ";
}
cout << endl;

//存取
str[0] = 'x';
cout << str << endl;//xello
str.at(1) = 'x';
cout << str << endl;//xxllo



/***字符串插入和删除**********************************************************************************/
函数原型：
string& insert(int pos,const char* c);
string& insert(int pos,const string& str);
string& insert(int pos,int n, char c);
string& erase(int pos,int n = nops);

void test()
{
  string str = "hello";

  str.insert(1,"nmd");
  cout << "str = " << str << endl;//"hnmdello"

  str.erase(1,3);
  cout << "str = " << str << endl;//"hello"
}



/***子串获取******************************************************************************************/
string& substr(int pos = 0,int n = npos) const;//返回由pos开始的n个字符组成的字符串

void test()
{
  string email = "mihu@hust.com";

  int pos = email.find("@");
  string userName = email.substr(0,pos);
  cout << "userName is " << userName << endl;
}






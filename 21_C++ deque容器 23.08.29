23.08.29

deque容器

/***deque容器基本概念***********************************************************************/

功能：双端数组，可以对头端进行插入删除操作

vector与deque的区别：
vector对于头部的插入效率低，数据量越大效率越低。
deque对于头部的插入删除速度比vector高。
vector对于元素的访问速度比deque要高，是由结构所决定的。

deque的内部工作原理：
deque内部有一个中控器，通过中控器来维护一些分段的缓冲区域。

  中控器：
                         头部插入元素
  |______|       _____________↓____________
  |_0x01_|  ---> |____|____|____|elem|elem|      //这些缓冲区域并不连续,中控器维护这些缓冲区的地址，使得使用deque时像一片连续的存储空间
  |_0x02_|  ---> |elem|elem|elem|elem|elem|      //deque的迭代器也支持随机访问
  |_0x03_|  ---> |elem|elem|____|____|____|
  |______|                    ↑
                         尾部插入元素



/***构造函数************************************************************************************/

函数原型：
deque<T> deq;       //默认构造
deque(begin,end);   //区间构造
deque(n,elem);      //构造包含有n个elem的deque容器
deque(const deque& deq);         //拷贝构造



/***赋值操作***********************************************************************************/

deque& operator=(const deque& deq);  //重载等号
deque& assign(begin,end);            //assign函数
deque& assign(n,elem);               //n个elem



/***大小操作***********************************************************************************/

deque<int> deq;
deq.empty();//判断是否为空，为空则返回true。
deq.size();//返回容器大小
deq.resize(num,elem);//重新指定容器大小，若num大于原本大小，则后面填充默认值或指定的elem，若num小于原本大小，则删除多余的部分。



/***插入和删除*****************************************************************************************/

push_back(elem);
push_front(elem);
pop_back();
pop_front();

insert(pos,elem);//返回新插入值的位置
insert(pos,n,elem);//无返回值
insert(pos,begin,end);//无返回值

clear();
erase(begin,end);//返回下一个数据的值
erase(pos);//返回下一个数据的值



/***数据存取**********************************************************************************************/

at()
operator[]
front()
end()


/***排序操作*******************************************************************************************/

sort(iterator begin,itrator end);



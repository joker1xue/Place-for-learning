23.08.22

案例：数组类封装

需求分析：
template<class T>
class Array
{
  private:
  //数组
  T * pAddress;
  //容量
  m_Capacity;
  //大小
  m_Size;

  public:
  构造函数;
  拷贝构造;  //
  operator=;//拷贝构造与operator=的存在是为了解决浅拷贝问题
  //浅拷贝，在构造时单纯将地址的值进行复制，因此在创建多个对象时，如果对一个对象的值进行操作，也会影响其他的对象的值，因此要使用深拷贝来解决
  利用下标的方式进行数组的访问;
  尾插;
  尾删;
  获取数组容量;
  获取数组大小;
  析构函数;
};



/***头文件<<MyArray.hpp>>*************************************************/

#pragma once                       //用于防止头文件被包含两次
#include<iostream>
#include<string>
using namespace std;

template<class T>
class MyArray
{
  private:
  T * pAddress;
  int m_Capacity;//容量
  int m_Size;    //大小

  public:


  /***构造函数***/
  MyArray(int capacity)
  {
    cout << "有参构造函数" << endl;
    this->m_Capacity = capacity;
    this->m_Size = 0;
    this->pAddress = new T[this->Capacity];
  }


  /***拷贝构造函数***/
  MyArray(const MyArray& arr)
  {
    cout << "拷贝构造函数" << endl;
    this->m_Capacity = arr.m_Capacity;
    this->m_Size = arr.m_Size;


    //深拷贝
    this->pAddress = new T[arr.m_Capacity];


    //将arr中的数据都拷贝过来
    for(int i = 0;i < m_Size;i++)
    {
      this->pAddress[i] = arr.pAddress[i];
    }
  }


  /***重载=，operator=***/
  MyArray& operator=(const MyArray& arr)
  {
    //先判断原来在堆区是否有数据，如有则先释放
    if(this->pAddress != NULL)
    {
      delete this->pAddress;
      this->pAddress = NULL:
      this->m_Capacity = 0;
      this->m_Size = 0;
    }
  
    this->m_Capacity = arr.m_Capacity;
    this->m_Size = arr.m_Size;
    this->pAddress = new T[arr.m_Capacity];
    for(int i = 0;i < m_Size;i++)
    {
      this->pAddress[i] = arr.pAddress[i];
    }
    return *this;
  }


/***利用下表对数组进行访问***/
T& operator[](int index)
{
  return this.pAddress[index];
}


/***尾插***/
void PushBack(const T& value)
{
  if(this->m_Capacity == this->m_Size)
  {
    cout << "数组大小超出数组容量" << endl;
    return;
  }
  this.pAddress[this->m_Size] = value;
  this->m_Size++;
}


//尾删
void PopBack()
{
  if(this->m_Size == 0)
  {
    cout << " 数组已为空！" << endl;
    return;
  }
  this->m_Size--;
}


//获取数组容量
void getCapacity()
{
  return this->m_Capacity;
}


//获取数组大小
void getSize()
{
  return this->m_Size;
}


  //析构函数
  ~MyArray()
  {
    cout << "析构函数" << endl;
    if(this->pAddress != NULL)
    {
      delete[] this->pAddress;
      this->pAddress = NULL;
    }
  }

  
};
























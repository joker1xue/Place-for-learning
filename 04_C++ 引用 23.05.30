23.05.30

//引用的基本语法

int a =10;
int &b = a;
//b就是对a的引用，通俗的讲，就是一个别名，可以对a的内存进行操作，更改a中的值。






//引用的注意事项

（1）引用必须初始化
（2）引用在初始化后不可更改

//引用做函数返回值。（1）不要返回局部变量的引用。（2）函数的调用可以作为左值

int& test1()
{
  int a = 10; 
  return a;
}

int& test2()
{
  static int a = 1000;                      //静态变量，存储在全局区。
  return a;
}

int main()
{
  int &ref = test1();
  cout << "ref = " << ref << endl;
  cout << "ref = " << ref << endl;         //这里因为返回的是局部变量的引用，在函数结束时a被释放，第二次打印就会乱码出错。
  
  int &ref2 = test2();
  test2() = 2000;                          //使用原名对a进行操作，在这里函数调用作为左值进行赋值操作。
  cout << "ref2 = " << ref2 << endl;
  cout << "ref2 = " << ref2 << endl;
  cout << "ref2 = " << ref2 << endl;       //ref2的值也为2000，作为a的别名对a的值进行访问。
  
  system("pause");
  return 0;
}






//引用的本质

引用的本质是指针常量，
int& ref = a;
编译时编译器会自动转换为：
int * const ref = &a;

ref = 20;
在使用引用时，编译器发现这是引用，会转换成*ref = 20；






//常量引用

//使用const，利用编译器规则优化代码
int& ref = 10;//报错
const int& ref = 10;//编译器自动转化为：int temp = 10; int& ref = temp; 这样修饰的引用无法再更改指向的内存和其中的值

//const修饰形参来防止误操作修改实参，和之前结构体章节中的作用相同，不再赘述。
















23.08.14

多态

/**********多态的基本概念**********/
静态多态：函数重载和运算符重载，复用函数名
动态多态：派生类和虚函数

静态多态和动态多态的区别：  静态多态函数地址早绑定，在编译阶段就确定函数地址，动态多态地址晚绑定，在运行阶段才确定函数地址

class Animal
{
public:
  //void speak()
  //{
  //  cout << "animal speak" << endl ;
  //}
  virtual void speak()
  {
    cout << " animal speak" << endl;
  }
};

class Cat : public Animal
{
public:
  void speak()
  {
    cout << "cat speak" << endl;
  }
};

void testSpeak(Animal &animal)
{
  animal.speak;
}

int main()
{
  Cat cat;
  testSpeak(cat);
}
在没有使用virtual定义父类speak函数时，是地址早绑定，在编译阶段就确定函数地址，所以调用testSpeak函数时会显示animal speak
由于使用virtual修饰父类的函数，也就是定义了一个虚函数，会显示实际传入的类的类型来调用函数。

多态满足条件：1.有继承关系 2.子类重写父类虚函数
多态使用条件：父类指针或引用指向子类对象。

在父类里定义虚函数时，编译时会生成一个vfptr，也就是virtual function pointer,虚函数表指针，指向一个存储函数的表，当子类继承时，会将这个
指针和表的内容也继承下来，当子类像以上代码一样对父类中的函数进行重写的时候，就会修改表中的内容。



/**********纯虚函数和抽象类***********/
纯虚函数：在虚函数的基础上，在参数列表后不写函数体而是直接让其等于0，也就是virtual 函数类型 函数名(参数列表) = 0；
抽象类  ：定义了纯虚函数的类自动变为抽象类
抽象类的特点：1.不能用抽象类实例化对象；2.子类必须对纯虚函数进行重载，否则子类也变为抽象类。







